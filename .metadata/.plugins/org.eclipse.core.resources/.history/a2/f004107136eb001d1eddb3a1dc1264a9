package com.example.demo.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.http.MediaType;

import com.example.demo.models.Products;
import com.example.demo.payload.response.MessageResponse;
import com.example.demo.payload.response.ProductResponse;
import com.example.demo.repository.ProductsRepo;
import com.example.demo.security.service.ProductsService;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.IOException;
import java.net.http.HttpHeaders;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/api")
public class ProductsController {

	@Autowired
	ProductsService productsService;

	@Autowired
	ProductsRepo productsRepo;

	@PostMapping(value = "/addProducts", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> uploadFile(@RequestParam(value = "file") MultipartFile file,
			@RequestParam("name") String name, @RequestParam("price") String price,
			@RequestParam("description") String description, @RequestParam("category") String category,
			@RequestParam("vendor") String vendor) throws IOException {	

		productsService.store(file, name, price, description, category, vendor);
		return ResponseEntity.ok(new MessageResponse("Product registered successfully!"));
	}

	@GetMapping("/allProducts")
	public ResponseEntity<List<Products>> addproducts() {
		List<Products> products = productsService.fetchAllBlogs();

		return ResponseEntity.status(HttpStatus.OK).body(products);
	}

	@GetMapping("/allProducts/{username}")
	public ResponseEntity getProductsByUsername(@PathVariable("username") String username) {
		System.out.println(username);
		List<Products> products = null;
		try {

			products = productsService.getProductsByVendor(username);
			System.out.println(products);
		} catch (Exception e) {

			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		return ResponseEntity.status(HttpStatus.ACCEPTED).body(products);
	}

//	@PutMapping("/updateProducts/{productid}")
//	public ResponseEntity updateProducts(@PathVariable("productid") Long productid,@RequestParam(value = "file") MultipartFile file,
//			@RequestParam("name") String name, @RequestParam("price") String price,
//			@RequestParam("description") String description, @RequestParam("category") String category,
//			@RequestParam("vendor") String vendor) {
//
//		ProductResponse productResponse = null;
//		Products res = null;
//
//		try {
//
////			System.out.println("Products:  " + products);
//			res = productsService.getProductsByProductId(productid);
//			System.out.println(res);
//
//			if (res != null) {
//
//				productsService.store(file,res.getName(),res.getPrice(), res.getDescription(),res.getCategory(),res.getVendor());
//				
//
//			} else {
//
//				return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
//
//			}
//		} catch (Exception e) {
//		
//			e.printStackTrace();
//			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
//		}
//		return ResponseEntity.accepted().body(productResponse);
//	}

	@PostMapping("/updateProducts")
	public ResponseEntity<Products> updateUserBlog(@RequestPart(name="file",required = false) MultipartFile file, @RequestParam("blog") String blog) throws IOException {
		
		Products  blogData=new ObjectMapper().readValue(blog, Products.class);
		
		System.out.println(blogData.getImage());
		System.out.println(blog);
		
		Blog blogResponse=null;
		
		if (!file.isEmpty()) {
			String cleanPath = StringUtils.cleanPath(file.getOriginalFilename());
			//System.out.println(cleanPath);
			blogData.setImage(cleanPath);
			blogData.setImageByte(file.getBytes());
			blogResponse=productsService.saveUserBlog(blogData);
			String upload = "images/";

			FileUploadUtil.saveFile(upload, cleanPath, file);
		}else
		{
			System.out.println("file is null");
		}
		
		//System.out.println(blog);
		
		return ResponseEntity.ok(blogResponse);
	}
	
	@DeleteMapping("/deleteProducts/{productid}")
	public ResponseEntity deleteProducts(@PathVariable("productid") Long productid) {
		try {

			productsService.deleteProducts(productid);
		} catch (Exception e) {

			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		return ResponseEntity.status(HttpStatus.OK).build();
	}
}
