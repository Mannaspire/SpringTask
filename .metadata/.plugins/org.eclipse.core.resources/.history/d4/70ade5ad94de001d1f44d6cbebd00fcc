package com.example.demo.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;
import org.springframework.http.MediaType;

import com.example.demo.models.Products;
import com.example.demo.payload.response.MessageResponse;
import com.example.demo.payload.response.ProductResponse;
import com.example.demo.repository.ProductsRepo;
import com.example.demo.security.service.ProductsService;

import java.io.IOException;
import java.net.http.HttpHeaders;
import java.util.List;
import java.util.stream.Collectors;

@RestController
@CrossOrigin(origins = "http://localhost:4200")
@RequestMapping("/api")
public class ProductsController {

	@Autowired
	ProductsService productsService;

	@Autowired
	ProductsRepo productsRepo;

	@PostMapping(value = "/addProducts", produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> uploadFile(@RequestParam(value = "file") MultipartFile file,
			@RequestParam("name") String name, @RequestParam("price") String price,
			@RequestParam("description") String description, @RequestParam("category") String category,
			@RequestParam("vendor") String vendor) throws IOException {

		productsService.store(file, name, price, description, category, vendor);
		return ResponseEntity.ok(new MessageResponse("Product registered successfully!"));
	}

	@GetMapping("/allproducts/{username}")
	public ResponseEntity getProductsByUsername(@PathVariable("username") String username) {
		List<Products> products = null;
		try {

			products = productsService.getProductsByUsername(username);

		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
		}
		return ResponseEntity.status(HttpStatus.ACCEPTED).body(products);
	}

	@PutMapping("/updateproducts/{productid}")
	public ResponseEntity updateProducts(@PathVariable("productid") Integer productid, @RequestBody Products products) {

		ProductResponse productResponse = null;
		Products getProductsByproductid = null;

		try {

			System.out.println("Products:  " + products);
			getProductsByproductid = productsService.getProductsByProductId(productid);
			System.out.println(getProductsByproductid);
			
			if (getProductsByproductid != null) {
				
				productResponse = productsService.store();
						
			} else {
				
				return ResponseEntity.status(HttpStatus.NOT_FOUND).build();
			
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
			return ResponseEntity.status(HttpStatus.BAD_REQUEST).build();
		
		}
		return ResponseEntity.accepted().body(productResponse);

	}
}
